enum LatePaymentFeeType {
  ONE_TIME
  DAILY
  WEEKLY
}

enum PropsApartmentStatus {
  OCCUPIED
  VACANT
}

enum PropsSettingType {
  NOT_DEFINED
  APPLICATION
  SECURITY_DEPOSIT
  LATEFEE
}

enum Refundability {
  YES
  NO
}

model properties {
  id           String    @id @default(cuid())
  name         String
  description  String
  propertysize Int?
  isDeleted    Boolean   @default(false)
  showCase     Boolean   @default(false) //showcase as rentals
  // owners
  landlordId   String
  landlord     landlords @relation(fields: [landlordId], references: [id])
  agencyId     String?
  agency       agency?   @relation(fields: [agencyId], references: [id])
  agents       agents[]
  currency     String? // Example: USD, EUR, NGN
  // marketValue
  marketValue  Decimal?  @default(0.00) @db.Decimal(18, 2)
  rentalFee    Decimal?  @default(0.00) @db.Decimal(18, 2)
  dueDate      DateTime?

  // time attributes
  yearBuilt DateTime?
  createdAt DateTime? @default(now())

  // address
  city     String
  state    String
  country  String
  zipcode  String
  location String?

  // visualizations
  images   String[]
  videourl String[]

  amenities            String[]
  // apartments
  totalApartments      Int?
  apartments           apartments[]
  ratings              Rating[]
  tenants              tenants[]
  applicant            application[]
  maintenance          maintenance[]
  reviews              reviews[]
  propertyDocument     propertyDocument[]
  bills                bills[]
  taskManagement       taskManagement[]
  inventoryManageMent  inventoryManageMent[]
  maintenanceWhitelist maintenanceWhitelist[]

  //transaction can be expenses incurred or income generated
  transactions Transaction[]
  Budget       Budget[]
  // late fee for due payment (either daily or one time stuff)
  // rental fee should be for both  appartment and property
  // is it rental fee weekly, monthly, or yearly
  // due date on rental for both appartment or property

  // IDEAS:
  // make a history of properties
  // create a setting a property setting

  //setting 
  settings     PropApartmentSettings?
  availability PropsApartmentStatus?  @default(VACANT)

  // Relation to applicationInvites
  applicationInvites applicationInvites[]
}

model PropApartmentSettings {
  id         String     @id @default(cuid())
  // Optional relationships to differentiate setting scopes
  landlordId String?
  landlord   landlords? @relation(fields: [landlordId], references: [id])

  propertyId String?     @unique // If set, these settings apply to the property
  property   properties? @relation(fields: [propertyId], references: [id])

  apartmentId String?     @unique // If set, these settings apply to a specific apartment
  apartment   apartments? @relation(fields: [apartmentId], references: [id])

  // Setting categorization
  settingType PropsSettingType @default(NOT_DEFINED)

  // late fee settings
  lateFee           Decimal             @default(0.00) @db.Decimal(18, 2) // for fixed scenario
  lateFeeFrequency  LatePaymentFeeType?
  lateFeePercentage Int?                @default(0)
  gracePeriodDays   Int?

  // security deposit
  depositPercentage Decimal @default(0.00) @db.Decimal(5, 2)
  refundTimeframe   String? // Options like '7 days', '30 days'

  // application
  applicationFee Decimal        @default(0.00) @db.Decimal(5, 2)
  refundPolicy   Refundability? // Describe refund policy [YES OR NO]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model propertyDocument {
  id          String   @id @default(cuid())
  name        String
  documentUrl String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  apartmentsId String?
  apartments   apartments? @relation(fields: [apartmentsId], references: [id])
  propertyId   String?
  properties   properties? @relation(fields: [propertyId], references: [id])
  uploadedBy   String?
  users        users?      @relation(fields: [uploadedBy], references: [id])
}

model apartments {
  id                   String                         @id @default(cuid())
  code                 String
  name                 String
  size                 String // 2500sqf
  monthlyRent          String
  minLeaseDuration     String
  maxLeaseDuration     String
  description          String
  sittingRoom          Int?
  waitingRoom          Int?
  bedrooms             Int?
  kitchen              Int?
  bathrooms            Int?
  garages              Int?
  floorplans           String[]
  facilities           String[]
  offices              Int?
  isVacant             Boolean                        @default(true)
  isDeleted            Boolean                        @default(false)
  rentalAmount         Decimal
  images               String[]
  videourl             String[]
  propertyId           String
  property             properties                     @relation(fields: [propertyId], references: [id])
  histories            appartmentTransactionHistory[]
  tenantPaymentHistory tenantPaymentHistory[]
  tenantsId            String?
  currentTenant        tenants?                       @relation(fields: [tenantsId], references: [id])
  maintenance          maintenance[]
  reviews              reviews[]
  propertyDocument     propertyDocument[]
  inventoryManageMent  inventoryManageMent[]
  maintenanceWhitelist maintenanceWhitelist[]
  transactions         Transaction[]

  settings           PropApartmentSettings?
  applicationInvites applicationInvites[]
}
